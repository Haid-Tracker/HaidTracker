<?php

namespace App\Http\Controllers;

use App\Models\CycleRecord;
use App\Models\Feedback;
use App\Models\Symptom;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Http\Request;

class CycleRecordController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $datas = CycleRecord::with(['user', 'feedback'])
        ->select([
            'cycle_records.*',
            'users.name as user_name'
        ])
        ->join('users', 'cycle_records.user_id', '=', 'users.id')
        ->get();

        return view('backend.cycle-record.index', compact('datas'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $users = User::pluck('name', 'id');
        $symptoms = Symptom::all();
        return view('backend.cycle-record.create', compact('users', 'symptoms'));
    }

    /**
     * Store a newly created resource in storage.
     */

    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'user_id' => 'required|exists:users,id',
            'start_date' => 'required|date',
            'end_date' => 'required|date|after_or_equal:start_date',
            'blood_volume' => 'required',
            'mood' => 'required|in:happy,sad,normal,angry,anxious',
            'cycle_regularity' => 'required|boolean',
            'notes' => 'nullable|string',
            'symptoms' => 'array|exists:symptoms,id'
        ]);

        // Hitung durasi siklus (DurationCycle)
        $durationCycle = Carbon::parse($validatedData['end_date'])->diffInDays(Carbon::parse($validatedData['start_date'])) + 1;

        // Ambil siklus sebelumnya untuk menghitung panjang siklus
        $previousCycle = CycleRecord::where('user_id', $validatedData['user_id'])
            ->orderBy('start_date', 'desc')
            ->first();

        // Hitung panjang siklus (LengthCycle) jika ada siklus sebelumnya
        $lengthCycle = $previousCycle ?
            Carbon::parse($validatedData['start_date'])->diffInDays(Carbon::parse($previousCycle->start_date))
            : null;

        // Prediksi tanggal siklus berikutnya
        $predictedDate = $previousCycle
            ? Carbon::parse($validatedData['start_date'])->addDays($lengthCycle)  // Gunakan panjang siklus sebelumnya
            : Carbon::parse($validatedData['end_date'])->addDays(28 - $durationCycle); // Default 28 hari dari akhir menstruasi

        // Tentukan status siklus normal/abnormal
        $isNormal = $this->determineCycleStatus(
            $lengthCycle,
            $durationCycle,
            $validatedData['blood_volume'],
            $validatedData['cycle_regularity']
        );

        // Simpan record siklus
        $cycleRecord = CycleRecord::create([
            'user_id' => $validatedData['user_id'],
            'start_date' => $validatedData['start_date'],
            'end_date' => $validatedData['end_date'],
            'predicted_date' => $predictedDate,
            'blood_volume' => $validatedData['blood_volume'],
            'mood' => $validatedData['mood'],
            'cycle_regularity' => $validatedData['cycle_regularity'],
            'notes' => $validatedData['notes'],
            'duration_cycle' => $durationCycle,
            'length_cycle' => $lengthCycle
        ]);

        // Menyematkan gejala jika ada
        if (!empty($validatedData['symptoms'])) {
            $cycleRecord->symptoms()->attach($validatedData['symptoms']);
        }

        // Membuat feedback berdasarkan status normal/abnormal
        Feedback::create([
            'cycle_record_id' => $cycleRecord->id,
            'status' => $isNormal ? 'normal' : 'abnormal',
            'feedback' => $this->generateFeedbackMessage($isNormal, $this->getAbnormalityReasons(
                $lengthCycle,
                $durationCycle,
                $validatedData['blood_volume'],
                $validatedData['cycle_regularity']
            ))
        ]);

        return redirect()->route('user.cycle-record')
            ->with('success', 'Cycle record created successfully.');
    }

    /**
     * Menentukan status siklus sesuai dokumentasi
     *
     * @param int|null $lengthCycle Panjang siklus dalam hari
     * @param int $durationCycle Durasi menstruasi dalam hari
     * @param float $bloodVolume Jumlah pergantian pembalut per jam
     * @param bool $cycleRegularity 1 untuk teratur, 0 untuk tidak teratur
     * @return bool
     */
    private function determineCycleStatus($lengthCycle, $durationCycle, $bloodVolume, $cycleRegularity)
    {
        // Jika ini adalah siklus pertama (tidak ada lengthCycle)
        // hanya cek durasi, volume darah, dan regularitas
        if ($lengthCycle === null) {
            return (
                $durationCycle >= 4 &&
                $durationCycle <= 7 &&
                $bloodVolume === 'normal' &&
                $cycleRegularity == 1
            );
        }

        // Cek semua kriteria sesuai dokumentasi
        return (
            $lengthCycle >= 21 &&
            $lengthCycle <= 35 &&
            $durationCycle >= 4 &&
            $durationCycle <= 7 &&
            $bloodVolume === 'normal' &&
            $cycleRegularity == 1
        );
    }

    /**
     * Mengidentifikasi alasan ketidaknormalan siklus
     */
    private function getAbnormalityReasons($lengthCycle, $durationCycle, $bloodVolume, $cycleRegularity)
    {
        $reasons = [];

        if ($lengthCycle !== null) {
            if ($lengthCycle < 21 || $lengthCycle > 35) {
                $reasons[] = "Panjang siklus ({$lengthCycle} hari) di luar rentang normal (21-35 hari)";
            }
        }

        if ($durationCycle < 4 || $durationCycle > 7) {
            $reasons[] = "Durasi menstruasi ({$durationCycle} hari) di luar rentang normal (4-7 hari)";
        }

        if ($bloodVolume !== 'normal') {
            $reasons[] = "Volume darah tidak normal, pergantian pembalut melebihi normal (max 1 kali per jam)";
        }

        if ($cycleRegularity == 0) {
            $reasons[] = "Siklus tidak teratur";
        }

        return $reasons;
    }

    /**
     * Menghasilkan pesan feedback berdasarkan status dan alasan abnormal
     */
    private function generateFeedbackMessage($isNormal, $reasons = [])
    {
        if ($isNormal) {
            return 'Siklus menstruasi Anda NORMAL.';
        }

        $feedback = "Siklus menstruasi Anda ABNORMAL karena:\n";
        foreach ($reasons as $reason) {
            $feedback .= "- {$reason}\n";
        }
        $feedback .= "\nSilakan baca artikel rekomendasi berikut untuk informasi lebih lanjut.";

        return $feedback;
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        $data = CycleRecord::with(['user', 'symptoms', 'feedback'])->findOrFail($id);
        return view('backend.cycle-record.show', compact('data'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $userId)
    {
        $datas = CycleRecord::with('symptoms')->findOrFail($userId);
        $symptoms = ['Cramps', 'Headache', 'Fatigue', 'Mood Swings', 'Bloating'];
        return view('backend.cycle-record.edit', compact('datas', 'symptoms'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $userId)
    {
        $request->validate([
            'startdate' => 'required|date',
            'enddate' => 'required|date',
            'predicteddate' => 'nullable|date',
            'bloodvolume' => 'required|in:light,medium,heavy',
            'mood' => 'nullable|string|max:255',
            'medication' => 'nullable|boolean',
            'notes' => 'nullable|string',
            'symptoms' => 'nullable|array'
        ]);

        $data = CycleRecord::find($userId);

        if (!$data) {
            return redirect()->route('user.cycle-record')->with('error', 'Record not found.');
        }

        $data->start_date = $request->input('startdate');
        $data->end_date = $request->input('enddate');
        $data->predicted_date = $request->input('predicteddate');
        $data->blood_volume = $request->input('bloodvolume');
        $data->mood = $request->input('mood');
        $data->medication = $request->has('medication');
        $data->notes = $request->input('notes');

        $data->save();

        // Update Symptoms
        $data->symptoms()->delete();
        if ($request->has('symptoms')) {
            foreach ($request->symptoms as $symptom) {
                Symptom::create([
                    'cycle_record_id' => $data->id,
                    'symptom_name' => $symptom,
                    'status' => true
                ]);
            }
        }

        return redirect()->route('user.cycle-record')->with('success', 'Record updated successfully.');
    }


    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $datas = CycleRecord::find($id);

        if (!$datas) {
            return redirect()->route('user.cycle-record')->with('error', 'Record not found.');
        }

        $datas->delete();

        return redirect()->route('user.cycle-record')->with('success', 'Record deleted successfully.');
    }
}
